{"version":3,"sources":["../../src/context.tsx","../../src/helpers.tsx","../../src/CalendarHeader.tsx","../../src/CalendarBody/Months.tsx","../../src/CalendarBody/Day.tsx","../../src/CalendarBody/Week.tsx","../../src/CalendarBody/Years.tsx","../../src/CalendarBody/index.tsx","../../src/index.tsx","App.js","index.js"],"names":["ReactanggalContext","createContext","setPreSelectionYear","setPreSelection","setStep","setCurrentSelected","preSelection","preSelectionYear","minDate","maxDate","showOutsideMonth","myGetYearStart","year","getPreSelectionYear","getYear","currentYearStart","CalendarHeader","useContext","step","renderStepView","useMemo","format","handleDisabledPrevious","isBefore","endOfMonth","subMonths","firstYearPreSelectionYear","Boolean","subYears","handleDisabledNext","isAfter","startOfMonth","addMonths","addYears","className","onClick","disabled","monthsArr","firstMonth","startOfYear","Months","key","i","el","num","month","Month","currentSelected","isDisabled","getMonth","clsx","isSameYear","setMonth","Day","day","isOutsideMonth","isSameMonth","isSameDay","getDate","Week","weekStart","week","renderDays","map","addDays","Years","yearStart","yearColumn","renderYears","years","Year","setYear","CalendarBody","renderDayNames","startOfWeek","renderWeeks","weeks","currentWeekStart","getWeeksInMonth","addWeeks","renderYearsColumn","yearsColumn","renderMonths","React","renderCalender","ReactanggalRoot","selected","onChange","useState","value","startOfDay","endOfDay","Date","App","date","setDate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a9113fa.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\ninterface IReactanggalProvider {\r\n  currentSelected?: Date | null | undefined\r\n  setCurrentSelected: (value: Date | null | undefined) => void\r\n  step?: number\r\n  setStep: (value: number) => void\r\n  preSelection: Date\r\n  setPreSelection?: (value: Date) => void\r\n  preSelectionYear: Date\r\n  setPreSelectionYear: (value: Date) => void\r\n  minDate: Date | null | undefined\r\n  maxDate: Date | null | undefined\r\n  showOutsideMonth: boolean\r\n}\r\n\r\nexport const ReactanggalContext = createContext<IReactanggalProvider>({\r\n  setPreSelectionYear: () => { },\r\n  setPreSelection: () => { },\r\n  setStep: () => { },\r\n  setCurrentSelected: () => { },\r\n  preSelection: new Date(),\r\n  preSelectionYear: new Date(),\r\n  minDate: null,\r\n  maxDate: null,\r\n  showOutsideMonth: false\r\n});\r\n","import { getYear } from \"date-fns\"\r\n\r\n// untuk dpt tahun awal dari suatu range tahun\r\nexport const myGetYearStart = (year: Date, totalYears: number) => {\r\n  const getPreSelectionYear = getYear(year)\r\n  let currentYearStart = +getPreSelectionYear % +totalYears\r\n  currentYearStart = +getPreSelectionYear - (currentYearStart !== 0 ? currentYearStart : totalYears) + 1\r\n  return currentYearStart\r\n}\r\n","import { addMonths, addYears, endOfMonth, format, getYear, isAfter, isBefore, startOfMonth, subMonths, subYears } from 'date-fns'\r\nimport React, { useContext, useMemo } from 'react'\r\nimport { ReactanggalContext } from './context'\r\nimport { myGetYearStart } from './helpers'\r\n\r\nconst CalendarHeader = () => {\r\n  const {\r\n    setStep,\r\n    step,\r\n    setPreSelection = () => { },\r\n    preSelection,\r\n    setPreSelectionYear,\r\n    preSelectionYear,\r\n    minDate,\r\n    maxDate\r\n  } = useContext(ReactanggalContext)\r\n\r\n  const handleStep = () => {\r\n    if (step === 0) {\r\n      setPreSelectionYear(preSelection)\r\n      setStep(1)\r\n    } else setStep(0)\r\n  }\r\n\r\n  const handleNext = () => {\r\n    if (handleDisabledNext) return\r\n    if (step === 0) setPreSelection(addMonths(preSelection, 1))\r\n    else if (step === 1) setPreSelectionYear(addYears(preSelectionYear, 24))\r\n    else if (step === 2) setPreSelectionYear(addYears(preSelectionYear, 1))\r\n  }\r\n\r\n  const handlePrevious = () => {\r\n    if (handleDisabledPrevious) return\r\n    if (step === 0) setPreSelection(subMonths(preSelection, 1))\r\n    else if (step === 1) setPreSelectionYear(subYears(preSelectionYear, 24))\r\n    else if (step === 2) setPreSelectionYear(subYears(preSelectionYear, 1))\r\n  }\r\n\r\n  const renderStepView = useMemo(() => {\r\n    if (step === 0) return format(preSelection, 'MMMM yyyy')\r\n    if (step === 1) {\r\n      const currentYearStart = myGetYearStart(preSelectionYear, 24)\r\n      return `${currentYearStart} - ${+currentYearStart + 23}`\r\n    }\r\n    if (step === 2) return getYear(preSelectionYear)\r\n    return\r\n  }, [step, preSelection, preSelectionYear])\r\n\r\n  const handleDisabledPrevious = useMemo(() => {\r\n    if (step === 0 && minDate) return isBefore(endOfMonth(subMonths(preSelection, 1)), minDate)\r\n    if (step === 1) {\r\n      const firstYearPreSelectionYear = myGetYearStart(preSelectionYear, 24)\r\n      if (minDate) return (firstYearPreSelectionYear - 1) < getYear(minDate)\r\n      return !Boolean(firstYearPreSelectionYear - 1)\r\n    }\r\n    if (step === 2) {\r\n      if (minDate) return isBefore(subYears(preSelectionYear, 1), minDate)\r\n      return !Boolean(getYear(preSelectionYear) - 1)\r\n    }\r\n    return\r\n  }, [preSelectionYear, step, preSelection, minDate])\r\n\r\n  const handleDisabledNext = useMemo(() => {\r\n    if (!maxDate) return false\r\n    if (step === 0) return isAfter(startOfMonth(addMonths(preSelection, 1)), maxDate)\r\n    if (step === 1) return (myGetYearStart(preSelectionYear, 24) + 24) > getYear(maxDate)\r\n    if (step === 2) return isAfter(addYears(preSelectionYear, 1), maxDate)\r\n    return\r\n  }, [step, preSelection, maxDate, preSelectionYear])\r\n\r\n  return (\r\n    <div className=\"reactanggal__header\">\r\n      <button\r\n        className=\"reactanggal__button reactanggal__header-period-control-button\"\r\n        onClick={handleStep}\r\n      >\r\n        {renderStepView}\r\n      </button>\r\n      <div>\r\n        <button\r\n          disabled={handleDisabledPrevious}\r\n          className=\"reactanggal__button reactanggal__header-arrow-button reactanggal__header-arrow-button--previous\"\r\n          onClick={handlePrevious}\r\n        />\r\n        <button\r\n          disabled={handleDisabledNext}\r\n          className=\"reactanggal__button reactanggal__header-arrow-button reactanggal__header-arrow-button--next\"\r\n          onClick={handleNext}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CalendarHeader\r\n","import clsx from 'clsx'\r\nimport { addMonths, format, getMonth, isSameYear, setMonth, startOfYear } from 'date-fns'\r\nimport React, { useContext, useMemo } from 'react'\r\nimport { ReactanggalContext } from '../context'\r\n\r\nconst monthsArr = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]\r\n\r\nconst firstMonth = startOfYear(new Date())\r\n\r\nconst Months = () => {\r\n  return <div>\r\n    {\r\n      monthsArr.map((el, i) => (\r\n        <div key={`monthColumn-${i}`} className=\"reactanggal__calendar-months\">\r\n          {el.map(num => (\r\n            <Month\r\n              key={`month-${num}`}\r\n              month={num}\r\n            />\r\n          ))}\r\n        </div>\r\n      ))\r\n    }\r\n  </div>\r\n}\r\n\r\ninterface IMonth {\r\n  month: number\r\n}\r\n\r\nconst Month: React.FC<IMonth> = ({\r\n  month\r\n}) => {\r\n  const {\r\n    currentSelected,\r\n    preSelectionYear,\r\n    setPreSelection = () => { },\r\n    setStep,\r\n    minDate,\r\n    maxDate\r\n  } = useContext(ReactanggalContext)\r\n\r\n  const isDisabled = useMemo(() => {\r\n    if (!minDate && !maxDate) return\r\n    return (minDate && month < getMonth(minDate)) || (maxDate && month > getMonth(maxDate))\r\n  }, [minDate, maxDate, month])\r\n\r\n  const handleClick = () => {\r\n    if (isDisabled) return\r\n    setPreSelection(setMonth(preSelectionYear, month))\r\n    setStep(0)\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        \"reactanggal__button reactanggal__calendar-month\",\r\n        (+month === +getMonth(new Date()) && isSameYear(preSelectionYear, new Date())) && 'reactanggal__calendar-month--today',\r\n        (currentSelected && +month === +getMonth(currentSelected) && isSameYear(preSelectionYear, currentSelected)) && 'reactanggal__calendar-month--selected',\r\n        isDisabled && 'reactanggal__calendar-month--disabled'\r\n      )}\r\n      onClick={handleClick}\r\n    >\r\n      {format(addMonths(firstMonth, month), 'MMMM')}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Months\r\n","import { getDate, isAfter, isBefore, isSameDay, isSameMonth } from 'date-fns'\r\nimport React, { useContext, useMemo } from 'react'\r\nimport clsx from 'clsx'\r\nimport { ReactanggalContext } from '../context'\r\n\r\ninterface IDay {\r\n  day: Date\r\n}\r\n\r\nconst Day: React.FC<IDay> = ({\r\n  day\r\n}) => {\r\n  const {\r\n    currentSelected,\r\n    setCurrentSelected,\r\n    setPreSelection = () => { },\r\n    preSelection,\r\n    showOutsideMonth,\r\n    minDate,\r\n    maxDate\r\n  } = useContext(ReactanggalContext)\r\n\r\n  const isOutsideMonth = useMemo(() => !isSameMonth(day, preSelection), [day, preSelection])\r\n\r\n  const isDisabled = useMemo(() => {\r\n    if (!minDate && !maxDate) return\r\n    return (minDate && isBefore(day, minDate)) || (maxDate && isAfter(day, maxDate))\r\n  }, [minDate, day, maxDate])\r\n\r\n  const handleClick = () => {\r\n    if (isDisabled) return\r\n    if (isOutsideMonth && !showOutsideMonth) return\r\n    if (!(typeof setCurrentSelected === 'function')) return\r\n\r\n    setCurrentSelected(day)\r\n    if (!isSameMonth(day, preSelection)) setPreSelection(day)\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        'reactanggal__calendar-day reactanggal__calendar-day-num reactanggal__button',\r\n        isSameDay(day, new Date()) && 'reactanggal__calendar-day-num--today',\r\n        (currentSelected && isSameDay(day, currentSelected)) && 'reactanggal__calendar-day-num--selected',\r\n        isOutsideMonth && `reactanggal__calendar-day-num--${showOutsideMonth ? 'outside' : 'hidden'}`,\r\n        isDisabled && 'reactanggal__calendar-day-num--disabled'\r\n      )}\r\n      onClick={handleClick}\r\n    >\r\n      {getDate(day)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Day\r\n","import { addDays } from 'date-fns'\r\nimport React, { useMemo } from 'react'\r\nimport Day from './Day'\r\n\r\ninterface IWeek {\r\n  weekStart: Date,\r\n  week: string | number\r\n}\r\n\r\nconst Week: React.FC<IWeek> = ({\r\n  weekStart,\r\n  week\r\n}) => {\r\n  const renderDays = useMemo(() => {\r\n    return [0, 1, 2, 3, 4, 5, 6].map(el => (\r\n      <Day\r\n        key={`week-${week}-day-${el}`}\r\n        day={addDays(weekStart, el)}\r\n      />\r\n    ))\r\n  }, [weekStart, week])\r\n\r\n  return (\r\n    <div className=\"reactanggal__calendar-week\">\r\n      {renderDays}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Week\r\n","import clsx from 'clsx'\r\nimport { getYear, setYear } from 'date-fns'\r\nimport React, { useContext, useMemo } from 'react'\r\nimport { ReactanggalContext } from '../context'\r\n\r\ninterface IYears {\r\n  yearStart: string | number,\r\n  yearColumn: string | number\r\n}\r\n\r\ninterface IYear {\r\n  year: number\r\n}\r\n\r\nconst Years: React.FC<IYears> = ({\r\n  yearStart,\r\n  yearColumn\r\n}) => {\r\n  const renderYears = useMemo(() => {\r\n    const years = []\r\n    for (let i = 0; i < 4; i++) {\r\n      years.push(\r\n        <Year\r\n          key={`yearColumn-${yearColumn}-year-${i}`}\r\n          year={+yearStart + i}\r\n        />\r\n      )\r\n    }\r\n    return years\r\n  }, [yearColumn, yearStart])\r\n\r\n  return (\r\n    <div className=\"reactanggal__calendar-years\">\r\n      {renderYears}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Year: React.FC<IYear> = ({\r\n  year\r\n}) => {\r\n  const {\r\n    currentSelected,\r\n    preSelection,\r\n    setPreSelection = () => { },\r\n    setPreSelectionYear,\r\n    setStep,\r\n    minDate,\r\n    maxDate\r\n  } = useContext(ReactanggalContext)\r\n\r\n  const isDisabled = useMemo(() => {\r\n    if (!minDate && !maxDate) return\r\n    return (minDate && year < getYear(minDate)) || (maxDate && year > getYear(maxDate))\r\n  }, [minDate, maxDate, year])\r\n\r\n  const handleClick = () => {\r\n    if (isDisabled) return\r\n    setPreSelectionYear(setYear(preSelection, year))\r\n    setPreSelection(setYear(preSelection, year))\r\n    setStep(2)\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        \"reactanggal__button reactanggal__calendar-year\",\r\n        +year === +getYear(new Date()) && 'reactanggal__calendar-year--today',\r\n        (currentSelected && +year === +getYear(currentSelected)) && 'reactanggal__calendar-year--selected',\r\n        isDisabled && 'reactanggal__calendar-year--disabled'\r\n      )}\r\n      onClick={handleClick}\r\n    >\r\n      {year}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Years\r\n","import { addDays, addWeeks, format, getWeeksInMonth, startOfMonth, startOfWeek } from 'date-fns'\r\nimport React, { useContext, useMemo } from 'react'\r\nimport { ReactanggalContext } from '../context'\r\nimport { myGetYearStart } from '../helpers'\r\nimport Months from './Months'\r\nimport Week from './Week'\r\nimport Years from './Years'\r\n\r\nconst CalendarBody = () => {\r\n  const { step, preSelection, preSelectionYear } = useContext(ReactanggalContext)\r\n\r\n  const renderDayNames = useMemo(() => {\r\n    let weekStart = startOfWeek(new Date())\r\n    return [0, 1, 2, 3, 4, 5, 6].map(el => (\r\n      <div\r\n        key={`dayname-${el}`}\r\n        className=\"reactanggal__calendar-day reactanggal__calendar-day-name\"\r\n      >\r\n        {format(addDays(weekStart, el), 'EEEEEE')}\r\n      </div>\r\n    ))\r\n  }, [])\r\n\r\n  const renderWeeks = useMemo(() => {\r\n    if (step !== 0) return\r\n\r\n    const weeks = []\r\n    let currentWeekStart = startOfWeek(startOfMonth(preSelection))\r\n    for (let i = 0; i < getWeeksInMonth(preSelection); i++) {\r\n      weeks.push(\r\n        <Week\r\n          key={`week-${i}`}\r\n          weekStart={currentWeekStart}\r\n          week={i}\r\n        />\r\n      )\r\n      currentWeekStart = addWeeks(currentWeekStart, 1)\r\n    }\r\n    return weeks\r\n  }, [preSelection, step])\r\n\r\n  const renderYearsColumn = useMemo(() => {\r\n    if (step !== 1) return\r\n\r\n    const yearsColumn = []\r\n    let currentYearStart = myGetYearStart(preSelectionYear, 24)\r\n    for (let i = 0; i < 6; i++) {\r\n      yearsColumn.push(\r\n        <Years\r\n          key={`yearColumn-${i}`}\r\n          yearStart={currentYearStart}\r\n          yearColumn={i}\r\n        />\r\n      )\r\n      currentYearStart = currentYearStart + 4\r\n    }\r\n\r\n    return yearsColumn\r\n  }, [step, preSelectionYear])\r\n\r\n  const renderMonths = useMemo(() => {\r\n    if (step !== 2) return\r\n    return <Months />\r\n  }, [step])\r\n\r\n  const renderCalender = useMemo(() => {\r\n    if (step === 0) return renderWeeks\r\n    else if (step === 1) return renderYearsColumn\r\n    else if (step === 2) return renderMonths\r\n    return\r\n  }, [step, renderMonths, renderWeeks, renderYearsColumn])\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        step === 0 &&\r\n        <div className=\"reactanggal__calendar-weeks-header\">\r\n          {\r\n            renderDayNames\r\n          }\r\n        </div>\r\n      }\r\n\r\n      <div className=\"reactanggal__calendar-body\">\r\n        {\r\n          renderCalender\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CalendarBody\r\n","import React, { useState } from 'react'\nimport CalendarHeader from './CalendarHeader'\nimport { ReactanggalContext } from './context'\nimport CalendarBody from './CalendarBody'\nimport { endOfDay, startOfDay } from 'date-fns'\n\ninterface IReactanggal {\n  selected?: Date | null | undefined\n  onChange?: (value: Date | null | undefined) => void,\n  minDate?: Date | null | undefined,\n  maxDate?: | null | undefined,\n  showOutsideMonth?: boolean\n}\n\nconst Reactanggal: React.FC<IReactanggal> = ({\n  selected,\n  onChange = () => { },\n  minDate,\n  maxDate,\n  showOutsideMonth = false\n}) => {\n  const [step, setStep] = useState(0)\n  const [preSelection, setPreSelection] = useState(selected || minDate || maxDate || new Date())\n  const [preSelectionYear, setPreSelectionYear] = useState(new Date())\n\n  return (\n    <ReactanggalContext.Provider value={{\n      currentSelected: selected,\n      setCurrentSelected: onChange,\n      step,\n      setStep,\n      preSelection,\n      setPreSelection,\n      preSelectionYear,\n      setPreSelectionYear,\n      minDate: minDate ? startOfDay(minDate) : minDate,\n      maxDate: maxDate ? endOfDay(maxDate) : maxDate,\n      showOutsideMonth\n    }}\n    >\n      <ReactanggalRoot />\n    </ReactanggalContext.Provider>\n  )\n}\n\nconst ReactanggalRoot = () => {\n  return (\n    <div className=\"reactanggal__calendar\">\n      <CalendarHeader />\n      <CalendarBody />\n    </div>\n  )\n}\n\nexport default Reactanggal\n","import { addDays, format } from 'date-fns'\nimport React, { useState } from 'react'\nimport Reactanggal from 'reactanggal'\nimport 'reactanggal/dist/reactanggal.css'\n\nconst minDate = addDays(new Date(), -1)\nconst maxDate = addDays(new Date(), 2)\n\nconst App = () => {\n  const [date, setDate] = useState(null)\n\n  return (\n    <div>\n      <p>{date && format(date, 'dd MM yyyy')}</p>\n      <Reactanggal\n        selected={date}\n        onChange={setDate}\n        minDate={minDate}\n        maxDate={maxDate}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}